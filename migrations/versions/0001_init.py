"""0001_init

Revision ID: e160cbf4df81
Revises: 
Create Date: 2024-04-07 12:06:22.383119

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "e160cbf4df81"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "publishers",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__publishers")),
        sa.UniqueConstraint("name", name=op.f("uq__publishers__name")),
    )
    op.create_table(
        "tag",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__tag")),
        sa.UniqueConstraint("name", name=op.f("uq__tag__name")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(length=150), nullable=False),
        sa.Column("first_name", sa.String(length=150), nullable=True),
        sa.Column("last_name", sa.String(length=150), nullable=True),
        sa.Column("email", sa.String(length=254), nullable=True),
        sa.Column("password", sa.String(length=128), nullable=False),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("is_superuser", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column("is_staff", sa.Boolean(), server_default=sa.text("false"), nullable=False),
        sa.Column("is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False),
        sa.Column("date_join", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__users")),
        sa.UniqueConstraint("email", name=op.f("uq__users__email")),
        sa.UniqueConstraint("username", name=op.f("uq__users__username")),
    )
    op.create_table(
        "books",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("publisher_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=254), nullable=False),
        sa.Column("preview_image", sa.String(length=128), nullable=False),
        sa.Column("file", sa.String(length=128), nullable=False),
        sa.Column("authors", sa.String(length=254), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("pages", sa.Integer(), nullable=False),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("private", sa.Boolean(), nullable=False),
        sa.Column("language", sa.String(length=128), nullable=False),
        sa.CheckConstraint("pages > 0", name=op.f("ck__books__check_pages_positive")),
        sa.CheckConstraint("year > 1", name=op.f("ck__books__check_year_positive")),
        sa.ForeignKeyConstraint(
            ["publisher_id"],
            ["publishers.id"],
            name=op.f("fk__books__publisher_id__publishers"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk__books__user_id__users"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__books")),
    )
    op.create_table(
        "book_tag_association",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("book_id", sa.Integer(), nullable=True),
        sa.Column("tag_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["book_id"], ["books.id"], name=op.f("fk__book_tag_association__book_id__books")
        ),
        sa.ForeignKeyConstraint(["tag_id"], ["tag.id"], name=op.f("fk__book_tag_association__tag_id__tag")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__book_tag_association")),
    )
    op.create_table(
        "books_read",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("book_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["book_id"], ["books.id"], name=op.f("fk__books_read__book_id__books")),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("fk__books_read__user_id__users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__books_read")),
    )
    op.create_table(
        "comments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["book_id"], ["books.id"], name=op.f("fk__comments__book_id__books"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk__comments__user_id__users"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__comments")),
    )
    op.create_table(
        "favorite_books",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("book_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["book_id"], ["books.id"], name=op.f("fk__favorite_books__book_id__books")),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("fk__favorite_books__user_id__users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__favorite_books")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("favorite_books")
    op.drop_table("comments")
    op.drop_table("books_read")
    op.drop_table("book_tag_association")
    op.drop_table("books")
    op.drop_table("users")
    op.drop_table("tag")
    op.drop_table("publishers")
    # ### end Alembic commands ###
